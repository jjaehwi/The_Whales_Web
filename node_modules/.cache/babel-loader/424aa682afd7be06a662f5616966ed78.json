{"ast":null,"code":"var _jsxFileName = \"/Users/hwi/Downloads/material-dashboard-react-main/src/layouts/weather/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { Container } from \"react-bootstrap\";\nimport WeatherButton from \"./components/WeatherButton\";\nimport WeatherBox from \"./components/WeatherBox\";\nimport { ClipLoader } from \"react-spinners\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cities = [\"paris\", \"new york\", \"tokyo\", \"seoul\"];\nconst API_KEY = \"11f51a135860cbff7041b080fabf611f\";\n\nconst Weather = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [city, setCity] = useState(null);\n  const [weather, setWeather] = useState(null);\n  const [apiError, setAPIError] = useState(\"\");\n\n  const getWeatherByCurrentLocation = async (lat, lon) => {\n    console.log(\"현재 위치\", lat, lon); //비동기 처리\n\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n      const res = await fetch(url);\n      const data = await res.json();\n      setWeather(data);\n      setLoading(false);\n    } catch (err) {\n      setAPIError(err.message);\n      setLoading(false);\n    }\n  };\n\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      getWeatherByCurrentLocation(latitude, longitude); // console.log('현재 위치', lat, lon);\n    });\n  };\n\n  const getWeatherByCity = async () => {\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`; //&units=metric\n\n      const res = await fetch(url);\n      const data = await res.json();\n      setWeather(data);\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n      setAPIError(err.message);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (city == null) {\n      setLoading(true);\n      getCurrentLocation();\n    } else {\n      setLoading(true);\n      getWeatherByCity();\n    }\n  }, [city]);\n\n  const handleCityChange = city => {\n    if (city === \"current\") {\n      setCity(null);\n    } else {\n      setCity(city);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"vh-100\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-100 vh-100 d-flex justify-content-center align-items-center\",\n      children: /*#__PURE__*/_jsxDEV(ClipLoader, {\n        color: \"#f86c6b\",\n        size: 150,\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : !apiError ? /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(WeatherBox, {\n        weather: weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(WeatherButton, {\n        cities: cities,\n        handleCityChange: handleCityChange,\n        selectedCity: city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this) : apiError\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Weather, \"dFcik+qQV3QDtK3E8P2TxOX54sA=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","Container","WeatherButton","WeatherBox","ClipLoader","cities","API_KEY","Weather","loading","setLoading","city","setCity","weather","setWeather","apiError","setAPIError","getWeatherByCurrentLocation","lat","lon","console","log","url","res","fetch","data","json","err","message","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","getWeatherByCity","handleCityChange"],"sources":["/Users/hwi/Downloads/material-dashboard-react-main/src/layouts/weather/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { Container } from \"react-bootstrap\";\nimport WeatherButton from \"./components/WeatherButton\";\nimport WeatherBox from \"./components/WeatherBox\";\nimport { ClipLoader } from \"react-spinners\";\n\nconst cities = [\"paris\", \"new york\", \"tokyo\", \"seoul\"];\nconst API_KEY = \"11f51a135860cbff7041b080fabf611f\";\n\nconst Weather = () => {\n  const [loading, setLoading] = useState(false);\n  const [city, setCity] = useState(null);\n  const [weather, setWeather] = useState(null);\n  const [apiError, setAPIError] = useState(\"\");\n\n  const getWeatherByCurrentLocation = async (lat, lon) => {\n    console.log(\"현재 위치\", lat, lon);\n    //비동기 처리\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}`;\n\n      const res = await fetch(url);\n      const data = await res.json();\n      setWeather(data);\n      setLoading(false);\n    } catch (err) {\n      setAPIError(err.message);\n      setLoading(false);\n    }\n  };\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      const { latitude, longitude } = position.coords;\n      getWeatherByCurrentLocation(latitude, longitude);\n      // console.log('현재 위치', lat, lon);\n    });\n  };\n\n  const getWeatherByCity = async () => {\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`;\n      //&units=metric\n      const res = await fetch(url);\n      const data = await res.json();\n\n      setWeather(data);\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n      setAPIError(err.message);\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (city == null) {\n      setLoading(true);\n      getCurrentLocation();\n    } else {\n      setLoading(true);\n      getWeatherByCity();\n    }\n  }, [city]);\n\n  const handleCityChange = (city) => {\n    if (city === \"current\") {\n      setCity(null);\n    } else {\n      setCity(city);\n    }\n  };\n  return (\n    <Container className=\"vh-100\">\n      {loading ? (\n        <div className=\"w-100 vh-100 d-flex justify-content-center align-items-center\">\n          <ClipLoader color=\"#f86c6b\" size={150} loading={loading} />\n        </div>\n      ) : !apiError ? (\n        <div class=\"main-container\">\n          <WeatherBox weather={weather} />\n          <WeatherButton cities={cities} handleCityChange={handleCityChange} selectedCity={city} />\n        </div>\n      ) : (\n        apiError\n      )}\n    </Container>\n  );\n};\n\nexport default Weather;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}