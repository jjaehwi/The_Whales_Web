{"ast":null,"code":"var _jsxFileName = \"/Users/hwi/Downloads/material-dashboard-react-main/src/layouts/weather/index.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport MDBox from \"components/MDBox\";\nimport Footer from \"examples/Footer\";\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\nimport { useState } from \"react\";\nimport { Map } from \"react-kakao-maps-sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"11f51a135860cbff7041b080fabf611f\";\n\nfunction Weather() {\n  _s();\n\n  const [lat, setLat] = useState(\"Loading...\");\n  const [long, setLong] = useState(\"Loading...\"); // const [data, setData] = useState(\"\");\n\n  const [temp, setTemp] = useState(\"Loading...\");\n  const [weather, setWeather] = useState(\"Loading...\"); // const [loading, setLoading] = useState(false);\n\n  async function onGeoOk(position) {\n    setLat(position.coords.latitude);\n    setLong(position.coords.longitude); // fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${API_KEY}`)\n    //   .then((response) => response.json())\n    //   .then(\n    //     (data) => console.log(`온도 : ${data.main.temp - 273.15}, 날씨 : ${data.weather[0].main}`),\n    //     (data) => setTemp(${data.main.temp - 273.15}),\n    //     (data) => setWeather(data.weather[0].main)\n    //   );\n\n    await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${API_KEY}`).then(res => {\n      console.log(`You live in ${lat} and ${long}`);\n      console.log(`온도 : ${Math.round(res.data.main.temp - 273.15)}, 날씨 : ${res.data.weather[0].main}`);\n      setTemp(Math.round(res.data.main.temp - 273.15));\n      setWeather(res.data.weather[0].main);\n    });\n  }\n\n  function onGeoError() {\n    alert(\"Can't find you. No weather for you.\");\n  }\n\n  navigator.geolocation.getCurrentPosition(onGeoOk, onGeoError); // useEffect(async () => {\n  //   const result = await axios(\n  //     `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${API_KEY}`\n  //   );\n  //   await setTemp(Math.round(result.data.main.temp - 273.15));\n  //   setWeather(result.data.weather[0].main);\n  //   console.log(`You live in ${lat} and ${long}`);\n  //   console.log(`온도 : ${result.data.main.temp - 273.15}, 날씨 : ${result.data.weather[0].main}`);\n  //   // console.log(`${temp} and ${weather}`);\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(DashboardLayout, {\n    children: [/*#__PURE__*/_jsxDEV(DashboardNavbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n      children: [\" \\uC704\\uB3C4 : \", lat]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n      children: [\" \\uACBD\\uB3C4 : \", long]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n      children: [\" \\uC628\\uB3C4 : \", temp, \"\\u2103\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n      children: [\" \\uB0A0\\uC528 : \", weather]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Map // 지도를 표시할 Container\n    , {\n      center: {\n        // 지도의 중심좌표\n        lat: 37.4964416,\n        lng: 126.9562113\n      },\n      style: {\n        // 지도의 크기\n        width: \"100%\",\n        height: \"450px\"\n      },\n      level: 3 // 지도의 확대 레벨\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Weather, \"Nx9UKa4z3Nbypg2DqLBYkaUBDUE=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["axios","MDBox","Footer","DashboardLayout","DashboardNavbar","useState","Map","API_KEY","Weather","lat","setLat","long","setLong","temp","setTemp","weather","setWeather","onGeoOk","position","coords","latitude","longitude","get","then","res","console","log","Math","round","data","main","onGeoError","alert","navigator","geolocation","getCurrentPosition","lng","width","height"],"sources":["/Users/hwi/Downloads/material-dashboard-react-main/src/layouts/weather/index.js"],"sourcesContent":["import axios from \"axios\";\nimport MDBox from \"components/MDBox\";\nimport Footer from \"examples/Footer\";\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\n\nimport { useState } from \"react\";\nimport { Map } from \"react-kakao-maps-sdk\";\n\nconst API_KEY = \"11f51a135860cbff7041b080fabf611f\";\n\nfunction Weather() {\n  const [lat, setLat] = useState(\"Loading...\");\n  const [long, setLong] = useState(\"Loading...\");\n  // const [data, setData] = useState(\"\");\n  const [temp, setTemp] = useState(\"Loading...\");\n  const [weather, setWeather] = useState(\"Loading...\");\n  // const [loading, setLoading] = useState(false);\n\n  async function onGeoOk(position) {\n    setLat(position.coords.latitude);\n    setLong(position.coords.longitude);\n    // fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${API_KEY}`)\n    //   .then((response) => response.json())\n    //   .then(\n    //     (data) => console.log(`온도 : ${data.main.temp - 273.15}, 날씨 : ${data.weather[0].main}`),\n    //     (data) => setTemp(${data.main.temp - 273.15}),\n    //     (data) => setWeather(data.weather[0].main)\n    //   );\n\n    await axios\n      .get(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${API_KEY}`\n      )\n      .then((res) => {\n        console.log(`You live in ${lat} and ${long}`);\n        console.log(\n          `온도 : ${Math.round(res.data.main.temp - 273.15)}, 날씨 : ${res.data.weather[0].main}`\n        );\n        setTemp(Math.round(res.data.main.temp - 273.15));\n        setWeather(res.data.weather[0].main);\n      });\n  }\n\n  function onGeoError() {\n    alert(\"Can't find you. No weather for you.\");\n  }\n\n  navigator.geolocation.getCurrentPosition(onGeoOk, onGeoError);\n\n  // useEffect(async () => {\n  //   const result = await axios(\n  //     `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${API_KEY}`\n  //   );\n  //   await setTemp(Math.round(result.data.main.temp - 273.15));\n  //   setWeather(result.data.weather[0].main);\n  //   console.log(`You live in ${lat} and ${long}`);\n  //   console.log(`온도 : ${result.data.main.temp - 273.15}, 날씨 : ${result.data.weather[0].main}`);\n\n  //   // console.log(`${temp} and ${weather}`);\n  // }, []);\n\n  return (\n    <DashboardLayout>\n      <DashboardNavbar />\n\n      <MDBox> 위도 : {lat}</MDBox>\n      <MDBox> 경도 : {long}</MDBox>\n      <MDBox> 온도 : {temp}℃</MDBox>\n      <MDBox> 날씨 : {weather}</MDBox>\n      <Map // 지도를 표시할 Container\n        center={{\n          // 지도의 중심좌표\n          lat: 37.4964416,\n          lng: 126.9562113,\n        }}\n        style={{\n          // 지도의 크기\n          width: \"100%\",\n          height: \"450px\",\n        }}\n        level={3} // 지도의 확대 레벨\n      />\n      <Footer />\n    </DashboardLayout>\n  );\n}\n\nexport default Weather;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}