{"ast":null,"code":"var _jsxFileName = \"/Users/hwi/Downloads/material-dashboard-react-main/src/layouts/weather/index.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport MDBox from \"components/MDBox\";\nimport Footer from \"examples/Footer\";\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\nimport { useState } from \"react\";\nimport { Map } from \"react-kakao-maps-sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"11f51a135860cbff7041b080fabf611f\";\n\nfunction Weather() {\n  _s();\n\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667\n    },\n    errMsg: null,\n    isLoading: true\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n      navigator.geolocation.getCurrentPosition(position => {\n        setState(prev => ({ ...prev,\n          center: {\n            lat: position.coords.latitude,\n            // 위도\n            lng: position.coords.longitude // 경도\n\n          },\n          isLoading: false\n        }));\n      }, err => {\n        setState(prev => ({ ...prev,\n          errMsg: err.message,\n          isLoading: false\n        }));\n      });\n    } else {\n      // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n      setState(prev => ({ ...prev,\n        errMsg: \"geolocation을 사용할수 없어요..\",\n        isLoading: false\n      }));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DashboardLayout, {\n    children: [/*#__PURE__*/_jsxDEV(DashboardNavbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n      children: [\" \\uC704\\uB3C4 : \", state.lat]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n      children: [\" \\uACBD\\uB3C4 : \", state.long]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n      children: [\" \\uC628\\uB3C4 : \", temp, \"\\u2103\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n      children: [\" \\uB0A0\\uC528 : \", weather]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Map // 지도를 표시할 Container\n    , {\n      center: {\n        // 지도의 중심좌표\n        lat: {\n          lat\n        },\n        lng: {\n          long\n        }\n      },\n      style: {\n        // 지도의 크기\n        width: \"100%\",\n        height: \"450px\"\n      },\n      level: 3 // 지도의 확대 레벨\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Weather, \"Q8YNfsBvw87HMx9zQJ/PXIe7fvE=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["axios","MDBox","Footer","DashboardLayout","DashboardNavbar","useState","Map","API_KEY","Weather","state","setState","center","lat","lng","errMsg","isLoading","useEffect","navigator","geolocation","getCurrentPosition","position","prev","coords","latitude","longitude","err","message","long","temp","weather","width","height"],"sources":["/Users/hwi/Downloads/material-dashboard-react-main/src/layouts/weather/index.js"],"sourcesContent":["import axios from \"axios\";\nimport MDBox from \"components/MDBox\";\nimport Footer from \"examples/Footer\";\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\n\nimport { useState } from \"react\";\nimport { Map } from \"react-kakao-maps-sdk\";\n\nconst API_KEY = \"11f51a135860cbff7041b080fabf611f\";\n\nfunction Weather() {\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667,\n    },\n    errMsg: null,\n    isLoading: true,\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setState((prev) => ({\n            ...prev,\n            center: {\n              lat: position.coords.latitude, // 위도\n              lng: position.coords.longitude, // 경도\n            },\n            isLoading: false,\n          }));\n        },\n        (err) => {\n          setState((prev) => ({\n            ...prev,\n            errMsg: err.message,\n            isLoading: false,\n          }));\n        }\n      );\n    } else {\n      // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n      setState((prev) => ({\n        ...prev,\n        errMsg: \"geolocation을 사용할수 없어요..\",\n        isLoading: false,\n      }));\n    }\n  }, []);\n\n  return (\n    <DashboardLayout>\n      <DashboardNavbar />\n\n      <MDBox> 위도 : {state.lat}</MDBox>\n      <MDBox> 경도 : {state.long}</MDBox>\n      <MDBox> 온도 : {temp}℃</MDBox>\n      <MDBox> 날씨 : {weather}</MDBox>\n      <Map // 지도를 표시할 Container\n        center={{\n          // 지도의 중심좌표\n          lat: { lat },\n          lng: { long },\n        }}\n        style={{\n          // 지도의 크기\n          width: \"100%\",\n          height: \"450px\",\n        }}\n        level={3} // 지도의 확대 레벨\n      />\n      <Footer />\n    </DashboardLayout>\n  );\n}\n\nexport default Weather;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,eAAP,MAA4B,2CAA5B;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AAEA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,GAAT,QAAoB,sBAApB;;AAEA,MAAMC,OAAO,GAAG,kCAAhB;;AAEA,SAASC,OAAT,GAAmB;EAAA;;EACjB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC;IACjCM,MAAM,EAAE;MACNC,GAAG,EAAE,SADC;MAENC,GAAG,EAAE;IAFC,CADyB;IAKjCC,MAAM,EAAE,IALyB;IAMjCC,SAAS,EAAE;EANsB,CAAD,CAAlC;EAQAC,SAAS,CAAC,MAAM;IACd,IAAIC,SAAS,CAACC,WAAd,EAA2B;MACzB;MACAD,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACGC,QAAD,IAAc;QACZV,QAAQ,CAAEW,IAAD,KAAW,EAClB,GAAGA,IADe;UAElBV,MAAM,EAAE;YACNC,GAAG,EAAEQ,QAAQ,CAACE,MAAT,CAAgBC,QADf;YACyB;YAC/BV,GAAG,EAAEO,QAAQ,CAACE,MAAT,CAAgBE,SAFf,CAE0B;;UAF1B,CAFU;UAMlBT,SAAS,EAAE;QANO,CAAX,CAAD,CAAR;MAQD,CAVH,EAWGU,GAAD,IAAS;QACPf,QAAQ,CAAEW,IAAD,KAAW,EAClB,GAAGA,IADe;UAElBP,MAAM,EAAEW,GAAG,CAACC,OAFM;UAGlBX,SAAS,EAAE;QAHO,CAAX,CAAD,CAAR;MAKD,CAjBH;IAmBD,CArBD,MAqBO;MACL;MACAL,QAAQ,CAAEW,IAAD,KAAW,EAClB,GAAGA,IADe;QAElBP,MAAM,EAAE,yBAFU;QAGlBC,SAAS,EAAE;MAHO,CAAX,CAAD,CAAR;IAKD;EACF,CA9BQ,EA8BN,EA9BM,CAAT;EAgCA,oBACE,QAAC,eAAD;IAAA,wBACE,QAAC,eAAD;MAAA;MAAA;MAAA;IAAA,QADF,eAGE,QAAC,KAAD;MAAA,+BAAcN,KAAK,CAACG,GAApB;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF,eAIE,QAAC,KAAD;MAAA,+BAAcH,KAAK,CAACkB,IAApB;IAAA;MAAA;MAAA;MAAA;IAAA,QAJF,eAKE,QAAC,KAAD;MAAA,+BAAcC,IAAd;IAAA;MAAA;MAAA;MAAA;IAAA,QALF,eAME,QAAC,KAAD;MAAA,+BAAcC,OAAd;IAAA;MAAA;MAAA;MAAA;IAAA,QANF,eAOE,QAAC,GAAD,CAAK;IAAL;MACE,MAAM,EAAE;QACN;QACAjB,GAAG,EAAE;UAAEA;QAAF,CAFC;QAGNC,GAAG,EAAE;UAAEc;QAAF;MAHC,CADV;MAME,KAAK,EAAE;QACL;QACAG,KAAK,EAAE,MAFF;QAGLC,MAAM,EAAE;MAHH,CANT;MAWE,KAAK,EAAE,CAXT,CAWY;;IAXZ;MAAA;MAAA;MAAA;IAAA,QAPF,eAoBE,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QApBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAwBD;;GAjEQvB,O;;KAAAA,O;AAmET,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}