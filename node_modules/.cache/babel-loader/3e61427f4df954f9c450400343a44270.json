{"ast":null,"code":"var _jsxFileName = \"/Users/hwi/Downloads/material-dashboard-react-main/src/components/MDSnackbar/index.js\",\n    _s = $RefreshSig$();\n\n/**\n=========================================================\n* Material Dashboard 2 React - v2.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\n* Copyright 2022 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n// prop-types is a library for typechecking of props\nimport PropTypes from \"prop-types\"; // @mui material components\n\nimport Snackbar from \"@mui/material/Snackbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Icon from \"@mui/material/Icon\";\nimport Divider from \"@mui/material/Divider\";\nimport Fade from \"@mui/material/Fade\"; // Material Dashboard 2 React components\n\nimport MDBox from \"components/MDBox\";\nimport MDTypography from \"components/MDTypography\"; // Custom styles for the MDSnackbar\n\nimport MDSnackbarIconRoot from \"components/MDSnackbar/MDSnackbarIconRoot\"; // Material Dashboard 2 React context\n\nimport { useMaterialUIController } from \"context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MDSnackbar(_ref) {\n  _s();\n\n  let {\n    color,\n    icon,\n    title,\n    dateTime,\n    content,\n    close,\n    bgWhite,\n    ...rest\n  } = _ref;\n  const [controller] = useMaterialUIController();\n  const {\n    darkMode\n  } = controller;\n  let titleColor;\n  let dateTimeColor;\n  let dividerColor;\n\n  if (bgWhite) {\n    titleColor = color;\n    dateTimeColor = \"dark\";\n    dividerColor = false;\n  } else if (color === \"light\") {\n    titleColor = darkMode ? \"inherit\" : \"dark\";\n    dateTimeColor = darkMode ? \"inherit\" : \"text\";\n    dividerColor = false;\n  } else {\n    titleColor = \"white\";\n    dateTimeColor = \"white\";\n    dividerColor = true;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Snackbar, {\n    TransitionComponent: Fade,\n    autoHideDuration: 5000,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"right\"\n    },\n    ...rest,\n    action: /*#__PURE__*/_jsxDEV(IconButton, {\n      size: \"small\",\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      onClick: close,\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        fontSize: \"small\",\n        children: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(MDBox, {\n      variant: bgWhite ? \"contained\" : \"gradient\",\n      bgColor: bgWhite ? \"white\" : color,\n      minWidth: \"21.875rem\",\n      maxWidth: \"100%\",\n      shadow: \"md\",\n      borderRadius: \"md\",\n      p: 1,\n      sx: {\n        backgroundColor: _ref2 => {\n          let {\n            palette\n          } = _ref2;\n          return darkMode ? palette.background.card : palette[color] || palette.white.main;\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(MDBox, {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        color: \"dark\",\n        p: 1.5,\n        children: [/*#__PURE__*/_jsxDEV(MDBox, {\n          display: \"flex\",\n          alignItems: \"center\",\n          lineHeight: 0,\n          children: [/*#__PURE__*/_jsxDEV(MDSnackbarIconRoot, {\n            fontSize: \"small\",\n            ownerState: {\n              color,\n              bgWhite\n            },\n            children: icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MDTypography, {\n            variant: \"button\",\n            fontWeight: \"medium\",\n            color: titleColor,\n            textGradient: bgWhite,\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n          display: \"flex\",\n          alignItems: \"center\",\n          lineHeight: 0,\n          children: [/*#__PURE__*/_jsxDEV(MDTypography, {\n            variant: \"caption\",\n            color: dateTimeColor,\n            children: dateTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Icon, {\n            sx: {\n              color: _ref3 => {\n                let {\n                  palette: {\n                    dark,\n                    white\n                  }\n                } = _ref3;\n                return bgWhite && !darkMode || color === \"light\" ? dark.main : white.main;\n              },\n              fontWeight: _ref4 => {\n                let {\n                  typography: {\n                    fontWeightBold\n                  }\n                } = _ref4;\n                return fontWeightBold;\n              },\n              cursor: \"pointer\",\n              marginLeft: 2,\n              transform: \"translateY(-1px)\"\n            },\n            onClick: close,\n            children: \"close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          margin: 0\n        },\n        light: dividerColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n        p: 1.5,\n        sx: {\n          fontSize: _ref5 => {\n            let {\n              typography: {\n                size\n              }\n            } = _ref5;\n            return size.sm;\n          },\n          color: _ref6 => {\n            let {\n              palette: {\n                white,\n                text\n              }\n            } = _ref6;\n            let colorValue = bgWhite || color === \"light\" ? text.main : white.main;\n\n            if (darkMode) {\n              colorValue = color === \"light\" ? \"inherit\" : white.main;\n            }\n\n            return colorValue;\n          }\n        },\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n} // Setting default values for the props of MDSnackbar\n\n\n_s(MDSnackbar, \"s0n8bwZXGOuz7un3Pl1FvVzqqsQ=\", false, function () {\n  return [useMaterialUIController];\n});\n\n_c = MDSnackbar;\nMDSnackbar.defaultProps = {\n  bgWhite: false,\n  color: \"info\"\n}; // Typechecking props for MDSnackbar\n\nMDSnackbar.propTypes = {\n  color: PropTypes.oneOf([\"primary\", \"secondary\", \"info\", \"success\", \"warning\", \"error\", \"dark\", \"light\"]),\n  icon: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  dateTime: PropTypes.string.isRequired,\n  content: PropTypes.node.isRequired,\n  close: PropTypes.func.isRequired,\n  bgWhite: PropTypes.bool\n};\nexport default MDSnackbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"MDSnackbar\");","map":{"version":3,"names":["PropTypes","Snackbar","IconButton","Icon","Divider","Fade","MDBox","MDTypography","MDSnackbarIconRoot","useMaterialUIController","MDSnackbar","color","icon","title","dateTime","content","close","bgWhite","rest","controller","darkMode","titleColor","dateTimeColor","dividerColor","vertical","horizontal","backgroundColor","palette","background","card","white","main","dark","fontWeight","typography","fontWeightBold","cursor","marginLeft","transform","margin","fontSize","size","sm","text","colorValue","defaultProps","propTypes","oneOf","node","isRequired","string","func","bool"],"sources":["/Users/hwi/Downloads/material-dashboard-react-main/src/components/MDSnackbar/index.js"],"sourcesContent":["/**\n=========================================================\n* Material Dashboard 2 React - v2.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\n* Copyright 2022 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n\n// prop-types is a library for typechecking of props\nimport PropTypes from \"prop-types\";\n\n// @mui material components\nimport Snackbar from \"@mui/material/Snackbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Icon from \"@mui/material/Icon\";\nimport Divider from \"@mui/material/Divider\";\nimport Fade from \"@mui/material/Fade\";\n\n// Material Dashboard 2 React components\nimport MDBox from \"components/MDBox\";\nimport MDTypography from \"components/MDTypography\";\n\n// Custom styles for the MDSnackbar\nimport MDSnackbarIconRoot from \"components/MDSnackbar/MDSnackbarIconRoot\";\n\n// Material Dashboard 2 React context\nimport { useMaterialUIController } from \"context\";\n\nfunction MDSnackbar({ color, icon, title, dateTime, content, close, bgWhite, ...rest }) {\n  const [controller] = useMaterialUIController();\n  const { darkMode } = controller;\n\n  let titleColor;\n  let dateTimeColor;\n  let dividerColor;\n\n  if (bgWhite) {\n    titleColor = color;\n    dateTimeColor = \"dark\";\n    dividerColor = false;\n  } else if (color === \"light\") {\n    titleColor = darkMode ? \"inherit\" : \"dark\";\n    dateTimeColor = darkMode ? \"inherit\" : \"text\";\n    dividerColor = false;\n  } else {\n    titleColor = \"white\";\n    dateTimeColor = \"white\";\n    dividerColor = true;\n  }\n\n  return (\n    <Snackbar\n      TransitionComponent={Fade}\n      autoHideDuration={5000}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      }}\n      {...rest}\n      action={\n        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={close}>\n          <Icon fontSize=\"small\">close</Icon>\n        </IconButton>\n      }\n    >\n      <MDBox\n        variant={bgWhite ? \"contained\" : \"gradient\"}\n        bgColor={bgWhite ? \"white\" : color}\n        minWidth=\"21.875rem\"\n        maxWidth=\"100%\"\n        shadow=\"md\"\n        borderRadius=\"md\"\n        p={1}\n        sx={{\n          backgroundColor: ({ palette }) =>\n            darkMode ? palette.background.card : palette[color] || palette.white.main,\n        }}\n      >\n        <MDBox\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          color=\"dark\"\n          p={1.5}\n        >\n          <MDBox display=\"flex\" alignItems=\"center\" lineHeight={0}>\n            <MDSnackbarIconRoot fontSize=\"small\" ownerState={{ color, bgWhite }}>\n              {icon}\n            </MDSnackbarIconRoot>\n            <MDTypography\n              variant=\"button\"\n              fontWeight=\"medium\"\n              color={titleColor}\n              textGradient={bgWhite}\n            >\n              {title}\n            </MDTypography>\n          </MDBox>\n          <MDBox display=\"flex\" alignItems=\"center\" lineHeight={0}>\n            <MDTypography variant=\"caption\" color={dateTimeColor}>\n              {dateTime}\n            </MDTypography>\n            <Icon\n              sx={{\n                color: ({ palette: { dark, white } }) =>\n                  (bgWhite && !darkMode) || color === \"light\" ? dark.main : white.main,\n                fontWeight: ({ typography: { fontWeightBold } }) => fontWeightBold,\n                cursor: \"pointer\",\n                marginLeft: 2,\n                transform: \"translateY(-1px)\",\n              }}\n              onClick={close}\n            >\n              close\n            </Icon>\n          </MDBox>\n        </MDBox>\n        <Divider sx={{ margin: 0 }} light={dividerColor} />\n        <MDBox\n          p={1.5}\n          sx={{\n            fontSize: ({ typography: { size } }) => size.sm,\n            color: ({ palette: { white, text } }) => {\n              let colorValue = bgWhite || color === \"light\" ? text.main : white.main;\n\n              if (darkMode) {\n                colorValue = color === \"light\" ? \"inherit\" : white.main;\n              }\n\n              return colorValue;\n            },\n          }}\n        >\n          {content}\n        </MDBox>\n      </MDBox>\n    </Snackbar>\n  );\n}\n\n// Setting default values for the props of MDSnackbar\nMDSnackbar.defaultProps = {\n  bgWhite: false,\n  color: \"info\",\n};\n\n// Typechecking props for MDSnackbar\nMDSnackbar.propTypes = {\n  color: PropTypes.oneOf([\n    \"primary\",\n    \"secondary\",\n    \"info\",\n    \"success\",\n    \"warning\",\n    \"error\",\n    \"dark\",\n    \"light\",\n  ]),\n  icon: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  dateTime: PropTypes.string.isRequired,\n  content: PropTypes.node.isRequired,\n  close: PropTypes.func.isRequired,\n  bgWhite: PropTypes.bool,\n};\n\nexport default MDSnackbar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}