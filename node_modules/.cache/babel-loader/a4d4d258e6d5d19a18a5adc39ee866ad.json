{"ast":null,"code":"var _jsxFileName = \"/Users/hwi/Downloads/material-dashboard-react-main/src/layouts/weather/index.js\",\n    _s = $RefreshSig$();\n\n// import axios from \"axios\";\nimport MDBox from \"components/MDBox\";\nimport Footer from \"examples/Footer\";\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\nimport { useEffect, useState } from \"react\";\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\"; // const API_KEY = \"11f51a135860cbff7041b080fabf611f\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Weather() {\n  _s();\n\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667\n    },\n    errMsg: null,\n    isLoading: true\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n      navigator.geolocation.getCurrentPosition(position => {\n        setState(prev => ({ ...prev,\n          center: {\n            lat: position.coords.latitude,\n            // 위도\n            lng: position.coords.longitude // 경도\n\n          },\n          isLoading: false\n        }));\n      }, err => {\n        setState(prev => ({ ...prev,\n          errMsg: err.message,\n          isLoading: false\n        }));\n      });\n    } else {\n      // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n      setState(prev => ({ ...prev,\n        errMsg: \"geolocation을 사용할수 없어요..\",\n        isLoading: false\n      }));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DashboardLayout, {\n    children: [/*#__PURE__*/_jsxDEV(DashboardNavbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n      children: [\" \\uC704\\uB3C4 : \", state.center.lat]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n      children: [\" \\uACBD\\uB3C4 : \", state.center.lng]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Map // 지도를 표시할 Container\n    , {\n      center: state.center,\n      style: {\n        // 지도의 크기\n        width: \"100%\",\n        height: \"450px\"\n      },\n      level: 3 // 지도의 확대 레벨\n      ,\n      children: !state.isLoading && /*#__PURE__*/_jsxDEV(MapMarker, {\n        position: state.center,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: \"3px\",\n            color: \"#000\"\n          },\n          children: state.errMsg ? state.errMsg : \"현재 위치\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Weather, \"Q8YNfsBvw87HMx9zQJ/PXIe7fvE=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["MDBox","Footer","DashboardLayout","DashboardNavbar","useEffect","useState","Map","MapMarker","Weather","state","setState","center","lat","lng","errMsg","isLoading","navigator","geolocation","getCurrentPosition","position","prev","coords","latitude","longitude","err","message","width","height","padding","color"],"sources":["/Users/hwi/Downloads/material-dashboard-react-main/src/layouts/weather/index.js"],"sourcesContent":["// import axios from \"axios\";\nimport MDBox from \"components/MDBox\";\nimport Footer from \"examples/Footer\";\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\n\nimport { useEffect, useState } from \"react\";\nimport { Map, MapMarker } from \"react-kakao-maps-sdk\";\n\n// const API_KEY = \"11f51a135860cbff7041b080fabf611f\";\n\nfunction Weather() {\n  const [state, setState] = useState({\n    center: {\n      lat: 33.450701,\n      lng: 126.570667,\n    },\n    errMsg: null,\n    isLoading: true,\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      // GeoLocation을 이용해서 접속 위치를 얻어옵니다\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setState((prev) => ({\n            ...prev,\n            center: {\n              lat: position.coords.latitude, // 위도\n              lng: position.coords.longitude, // 경도\n            },\n            isLoading: false,\n          }));\n        },\n        (err) => {\n          setState((prev) => ({\n            ...prev,\n            errMsg: err.message,\n            isLoading: false,\n          }));\n        }\n      );\n    } else {\n      // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다\n      setState((prev) => ({\n        ...prev,\n        errMsg: \"geolocation을 사용할수 없어요..\",\n        isLoading: false,\n      }));\n    }\n  }, []);\n\n  return (\n    <DashboardLayout>\n      <DashboardNavbar />\n\n      <MDBox> 위도 : {state.center.lat}</MDBox>\n      <MDBox> 경도 : {state.center.lng}</MDBox>\n      {/* <MDBox> 온도 : {temp}℃</MDBox> */}\n      {/* <MDBox> 날씨 : {weather}</MDBox> */}\n      <Map // 지도를 표시할 Container\n        center={state.center}\n        style={{\n          // 지도의 크기\n          width: \"100%\",\n          height: \"450px\",\n        }}\n        level={3} // 지도의 확대 레벨\n      >\n        {!state.isLoading && (\n          <MapMarker position={state.center}>\n            <div style={{ padding: \"3px\", color: \"#000\" }}>\n              {state.errMsg ? state.errMsg : \"현재 위치\"}\n            </div>\n          </MapMarker>\n        )}\n      </Map>\n      <Footer />\n    </DashboardLayout>\n  );\n}\n\nexport default Weather;\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,eAAP,MAA4B,2CAA5B;AACA,OAAOC,eAAP,MAA4B,kCAA5B;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,sBAA/B,C,CAEA;;;;AAEA,SAASC,OAAT,GAAmB;EAAA;;EACjB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC;IACjCM,MAAM,EAAE;MACNC,GAAG,EAAE,SADC;MAENC,GAAG,EAAE;IAFC,CADyB;IAKjCC,MAAM,EAAE,IALyB;IAMjCC,SAAS,EAAE;EANsB,CAAD,CAAlC;EAQAX,SAAS,CAAC,MAAM;IACd,IAAIY,SAAS,CAACC,WAAd,EAA2B;MACzB;MACAD,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACGC,QAAD,IAAc;QACZT,QAAQ,CAAEU,IAAD,KAAW,EAClB,GAAGA,IADe;UAElBT,MAAM,EAAE;YACNC,GAAG,EAAEO,QAAQ,CAACE,MAAT,CAAgBC,QADf;YACyB;YAC/BT,GAAG,EAAEM,QAAQ,CAACE,MAAT,CAAgBE,SAFf,CAE0B;;UAF1B,CAFU;UAMlBR,SAAS,EAAE;QANO,CAAX,CAAD,CAAR;MAQD,CAVH,EAWGS,GAAD,IAAS;QACPd,QAAQ,CAAEU,IAAD,KAAW,EAClB,GAAGA,IADe;UAElBN,MAAM,EAAEU,GAAG,CAACC,OAFM;UAGlBV,SAAS,EAAE;QAHO,CAAX,CAAD,CAAR;MAKD,CAjBH;IAmBD,CArBD,MAqBO;MACL;MACAL,QAAQ,CAAEU,IAAD,KAAW,EAClB,GAAGA,IADe;QAElBN,MAAM,EAAE,yBAFU;QAGlBC,SAAS,EAAE;MAHO,CAAX,CAAD,CAAR;IAKD;EACF,CA9BQ,EA8BN,EA9BM,CAAT;EAgCA,oBACE,QAAC,eAAD;IAAA,wBACE,QAAC,eAAD;MAAA;MAAA;MAAA;IAAA,QADF,eAGE,QAAC,KAAD;MAAA,+BAAcN,KAAK,CAACE,MAAN,CAAaC,GAA3B;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF,eAIE,QAAC,KAAD;MAAA,+BAAcH,KAAK,CAACE,MAAN,CAAaE,GAA3B;IAAA;MAAA;MAAA;MAAA;IAAA,QAJF,eAOE,QAAC,GAAD,CAAK;IAAL;MACE,MAAM,EAAEJ,KAAK,CAACE,MADhB;MAEE,KAAK,EAAE;QACL;QACAe,KAAK,EAAE,MAFF;QAGLC,MAAM,EAAE;MAHH,CAFT;MAOE,KAAK,EAAE,CAPT,CAOY;MAPZ;MAAA,UASG,CAAClB,KAAK,CAACM,SAAP,iBACC,QAAC,SAAD;QAAW,QAAQ,EAAEN,KAAK,CAACE,MAA3B;QAAA,uBACE;UAAK,KAAK,EAAE;YAAEiB,OAAO,EAAE,KAAX;YAAkBC,KAAK,EAAE;UAAzB,CAAZ;UAAA,UACGpB,KAAK,CAACK,MAAN,GAAeL,KAAK,CAACK,MAArB,GAA8B;QADjC;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IAVJ;MAAA;MAAA;MAAA;IAAA,QAPF,eAwBE,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QAxBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA4BD;;GArEQN,O;;KAAAA,O;AAuET,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}