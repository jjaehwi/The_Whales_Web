{"ast":null,"code":"import _regeneratorRuntime from\"/Users/hwi/Downloads/material-dashboard-react-main/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/hwi/Downloads/material-dashboard-react-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/hwi/Downloads/material-dashboard-react-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import axios from\"axios\";import MDBox from\"components/MDBox\";import Footer from\"examples/Footer\";import DashboardLayout from\"examples/LayoutContainers/DashboardLayout\";import DashboardNavbar from\"examples/Navbars/DashboardNavbar\";import{useState}from\"react\";import{Map}from\"react-kakao-maps-sdk\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var API_KEY=\"11f51a135860cbff7041b080fabf611f\";function Weather(){var _useState=useState(\"Loading...\"),_useState2=_slicedToArray(_useState,2),lat=_useState2[0],setLat=_useState2[1];var _useState3=useState(\"Loading...\"),_useState4=_slicedToArray(_useState3,2),long=_useState4[0],setLong=_useState4[1];// const [data, setData] = useState(\"\");\nvar _useState5=useState(\"Loading...\"),_useState6=_slicedToArray(_useState5,2),temp=_useState6[0],setTemp=_useState6[1];var _useState7=useState(\"Loading...\"),_useState8=_slicedToArray(_useState7,2),weather=_useState8[0],setWeather=_useState8[1];// const [loading, setLoading] = useState(false);\nfunction onGeoOk(_x){return _onGeoOk.apply(this,arguments);}function _onGeoOk(){_onGeoOk=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(position){return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setLat(position.coords.latitude);setLong(position.coords.longitude);// fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${API_KEY}`)\n//   .then((response) => response.json())\n//   .then(\n//     (data) => console.log(`온도 : ${data.main.temp - 273.15}, 날씨 : ${data.weather[0].main}`),\n//     (data) => setTemp(${data.main.temp - 273.15}),\n//     (data) => setWeather(data.weather[0].main)\n//   );\n_context.next=4;return axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\".concat(lat,\"&lon=\").concat(long,\"&appid=\").concat(API_KEY)).then(function(res){console.log(\"You live in \".concat(lat,\" and \").concat(long));console.log(\"\\uC628\\uB3C4 : \".concat(Math.round(res.data.main.temp-273.15),\", \\uB0A0\\uC528 : \").concat(res.data.weather[0].main));setTemp(Math.round(res.data.main.temp-273.15));setWeather(res.data.weather[0].main);});case 4:case\"end\":return _context.stop();}}},_callee);}));return _onGeoOk.apply(this,arguments);}function onGeoError(){alert(\"Can't find you. No weather for you.\");}navigator.geolocation.getCurrentPosition(onGeoOk,onGeoError);// useEffect(async () => {\n//   const result = await axios(\n//     `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${API_KEY}`\n//   );\n//   await setTemp(Math.round(result.data.main.temp - 273.15));\n//   setWeather(result.data.weather[0].main);\n//   console.log(`You live in ${lat} and ${long}`);\n//   console.log(`온도 : ${result.data.main.temp - 273.15}, 날씨 : ${result.data.weather[0].main}`);\n//   // console.log(`${temp} and ${weather}`);\n// }, []);\nreturn/*#__PURE__*/_jsxs(DashboardLayout,{children:[/*#__PURE__*/_jsx(DashboardNavbar,{}),/*#__PURE__*/_jsxs(MDBox,{children:[\" \\uC704\\uB3C4 : \",lat]}),/*#__PURE__*/_jsxs(MDBox,{children:[\" \\uACBD\\uB3C4 : \",long]}),/*#__PURE__*/_jsxs(MDBox,{children:[\" \\uC628\\uB3C4 : \",temp,\"\\u2103\"]}),/*#__PURE__*/_jsxs(MDBox,{children:[\" \\uB0A0\\uC528 : \",weather]}),/*#__PURE__*/_jsx(Map// 지도를 표시할 Container\n,{center:{// 지도의 중심좌표\nlat:33.450701,lng:126.570667},style:{// 지도의 크기\nwidth:\"100%\",height:\"450px\"},level:3// 지도의 확대 레벨\n}),/*#__PURE__*/_jsx(Footer,{})]});}export default Weather;","map":{"version":3,"names":["axios","MDBox","Footer","DashboardLayout","DashboardNavbar","useState","Map","API_KEY","Weather","lat","setLat","long","setLong","temp","setTemp","weather","setWeather","onGeoOk","position","coords","latitude","longitude","get","then","res","console","log","Math","round","data","main","onGeoError","alert","navigator","geolocation","getCurrentPosition","lng","width","height"],"sources":["/Users/hwi/Downloads/material-dashboard-react-main/src/layouts/weather/index.js"],"sourcesContent":["import axios from \"axios\";\nimport MDBox from \"components/MDBox\";\nimport Footer from \"examples/Footer\";\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\n\nimport { useState } from \"react\";\nimport { Map } from \"react-kakao-maps-sdk\";\n\nconst API_KEY = \"11f51a135860cbff7041b080fabf611f\";\n\nfunction Weather() {\n  const [lat, setLat] = useState(\"Loading...\");\n  const [long, setLong] = useState(\"Loading...\");\n  // const [data, setData] = useState(\"\");\n  const [temp, setTemp] = useState(\"Loading...\");\n  const [weather, setWeather] = useState(\"Loading...\");\n  // const [loading, setLoading] = useState(false);\n\n  async function onGeoOk(position) {\n    setLat(position.coords.latitude);\n    setLong(position.coords.longitude);\n    // fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${API_KEY}`)\n    //   .then((response) => response.json())\n    //   .then(\n    //     (data) => console.log(`온도 : ${data.main.temp - 273.15}, 날씨 : ${data.weather[0].main}`),\n    //     (data) => setTemp(${data.main.temp - 273.15}),\n    //     (data) => setWeather(data.weather[0].main)\n    //   );\n\n    await axios\n      .get(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${API_KEY}`\n      )\n      .then((res) => {\n        console.log(`You live in ${lat} and ${long}`);\n        console.log(\n          `온도 : ${Math.round(res.data.main.temp - 273.15)}, 날씨 : ${res.data.weather[0].main}`\n        );\n        setTemp(Math.round(res.data.main.temp - 273.15));\n        setWeather(res.data.weather[0].main);\n      });\n  }\n\n  function onGeoError() {\n    alert(\"Can't find you. No weather for you.\");\n  }\n\n  navigator.geolocation.getCurrentPosition(onGeoOk, onGeoError);\n\n  // useEffect(async () => {\n  //   const result = await axios(\n  //     `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${API_KEY}`\n  //   );\n  //   await setTemp(Math.round(result.data.main.temp - 273.15));\n  //   setWeather(result.data.weather[0].main);\n  //   console.log(`You live in ${lat} and ${long}`);\n  //   console.log(`온도 : ${result.data.main.temp - 273.15}, 날씨 : ${result.data.weather[0].main}`);\n\n  //   // console.log(`${temp} and ${weather}`);\n  // }, []);\n\n  return (\n    <DashboardLayout>\n      <DashboardNavbar />\n\n      <MDBox> 위도 : {lat}</MDBox>\n      <MDBox> 경도 : {long}</MDBox>\n      <MDBox> 온도 : {temp}℃</MDBox>\n      <MDBox> 날씨 : {weather}</MDBox>\n      <Map // 지도를 표시할 Container\n        center={{\n          // 지도의 중심좌표\n          lat: 33.450701,\n          lng: 126.570667,\n        }}\n        style={{\n          // 지도의 크기\n          width: \"100%\",\n          height: \"450px\",\n        }}\n        level={3} // 지도의 확대 레벨\n      />\n      <Footer />\n    </DashboardLayout>\n  );\n}\n\nexport default Weather;\n"],"mappings":"waAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,MAAOC,MAAP,KAAkB,kBAAlB,CACA,MAAOC,OAAP,KAAmB,iBAAnB,CACA,MAAOC,gBAAP,KAA4B,2CAA5B,CACA,MAAOC,gBAAP,KAA4B,kCAA5B,CAEA,OAASC,QAAT,KAAyB,OAAzB,CACA,OAASC,GAAT,KAAoB,sBAApB,C,wFAEA,GAAMC,QAAO,CAAG,kCAAhB,CAEA,QAASC,QAAT,EAAmB,CACjB,cAAsBH,QAAQ,CAAC,YAAD,CAA9B,wCAAOI,GAAP,eAAYC,MAAZ,eACA,eAAwBL,QAAQ,CAAC,YAAD,CAAhC,yCAAOM,IAAP,eAAaC,OAAb,eACA;AACA,eAAwBP,QAAQ,CAAC,YAAD,CAAhC,yCAAOQ,IAAP,eAAaC,OAAb,eACA,eAA8BT,QAAQ,CAAC,YAAD,CAAtC,yCAAOU,OAAP,eAAgBC,UAAhB,eACA;AANiB,QAQFC,QARE,mIAQjB,iBAAuBC,QAAvB,oHACER,MAAM,CAACQ,QAAQ,CAACC,MAAT,CAAgBC,QAAjB,CAAN,CACAR,OAAO,CAACM,QAAQ,CAACC,MAAT,CAAgBE,SAAjB,CAAP,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AATF,sBAWQrB,MAAK,CACRsB,GADG,+DAEqDb,GAFrD,iBAEgEE,IAFhE,mBAE8EJ,OAF9E,GAIHgB,IAJG,CAIE,SAACC,GAAD,CAAS,CACbC,OAAO,CAACC,GAAR,uBAA2BjB,GAA3B,iBAAsCE,IAAtC,GACAc,OAAO,CAACC,GAAR,0BACUC,IAAI,CAACC,KAAL,CAAWJ,GAAG,CAACK,IAAJ,CAASC,IAAT,CAAcjB,IAAd,CAAqB,MAAhC,CADV,6BAC2DW,GAAG,CAACK,IAAJ,CAASd,OAAT,CAAiB,CAAjB,EAAoBe,IAD/E,GAGAhB,OAAO,CAACa,IAAI,CAACC,KAAL,CAAWJ,GAAG,CAACK,IAAJ,CAASC,IAAT,CAAcjB,IAAd,CAAqB,MAAhC,CAAD,CAAP,CACAG,UAAU,CAACQ,GAAG,CAACK,IAAJ,CAASd,OAAT,CAAiB,CAAjB,EAAoBe,IAArB,CAAV,CACD,CAXG,CAXR,uDARiB,0CAiCjB,QAASC,WAAT,EAAsB,CACpBC,KAAK,CAAC,qCAAD,CAAL,CACD,CAEDC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyClB,OAAzC,CAAkDc,UAAlD,EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,mBACE,MAAC,eAAD,yBACE,KAAC,eAAD,IADF,cAGE,MAAC,KAAD,+BAActB,GAAd,GAHF,cAIE,MAAC,KAAD,+BAAcE,IAAd,GAJF,cAKE,MAAC,KAAD,+BAAcE,IAAd,YALF,cAME,MAAC,KAAD,+BAAcE,OAAd,GANF,cAOE,KAAC,GAAI;AAAL,EACE,MAAM,CAAE,CACN;AACAN,GAAG,CAAE,SAFC,CAGN2B,GAAG,CAAE,UAHC,CADV,CAME,KAAK,CAAE,CACL;AACAC,KAAK,CAAE,MAFF,CAGLC,MAAM,CAAE,OAHH,CANT,CAWE,KAAK,CAAE,CAAG;AAXZ,EAPF,cAoBE,KAAC,MAAD,IApBF,GADF,CAwBD,CAED,cAAe9B,QAAf"},"metadata":{},"sourceType":"module"}